process Rec1 = {

    source = PoolSource {
     untracked vstring fileNames = {"/store/mc/2006/12/22/mc-physval-120-WToENU-LowLumi/0019/0026AE0E-969A-DB11-950E-003048769E6D.root"}        
        untracked int32 maxEvents = 5
    }

    include "Configuration/EventContent/data/EventContent.cff"    
    module RECO = PoolOutputModule {
        untracked string fileName = 'RecoKilledOnly.root'
        using RECOSIMEventContent
    } 

#
#  drop all the INPUT stuff, BUT simulation
#
    
    replace RECO.outputCommands += "drop *_*_*_T"
    replace RECO.outputCommands += SimG4CoreRECO.outputCommands
    replace RECO.outputCommands += SimTrackerRECO.outputCommands
    replace RECO.outputCommands += SimMuonRECO.outputCommands
    replace RECO.outputCommands += SimCalorimetryRECO.outputCommands
    replace RECO.outputCommands += RecoGenJetsRECO.outputCommands
    

 //Generator
include "SimGeneral/HepPDTESSource/data/pythiapdt.cfi"
include "PhysicsTools/HepMCCandAlgos/data/genParticleCandidatesFast.cfi"

# Calo geometry service model
 
   include "Geometry/CaloEventSetup/data/CaloGeometry.cfi"
   include "Geometry/CaloEventSetup/data/CaloTopology.cfi"

   include "Configuration/StandardSequences/data/FakeConditions.cff"

#ECAL LocalReco sequence
include "RecoLocalCalo/Configuration/data/RecoLocalCalo.cff"


#Add RecHitsKiller module:
module CreateDeadCells = EcalChannelKiller {
    string hitProducer = "ecalRecHit"
   string hitCollection = "EcalRecHitsEB"
   string reducedHitCollection =  "EcalRecHitsEB"
   string KilledHitCollection =  "KilledEcalRecHitsEB"
   string DeadChannelsFile = "DeadCellsEach5.txt"
   bool KillDeadCells =true
}


# geometry needed for clustering
include "RecoEcal/EgammaClusterProducers/data/geometryForClustering.cff"
 
 # create sequence for island clustering
include "RecoEcal/EgammaClusterProducers/data/islandClusteringSequence.cff"
replace islandBasicClusters.barrelHitProducer = "CreateDeadCells"

# hybrid clustering sequence
include "RecoEcal/EgammaClusterProducers/data/hybridClusteringSequence.cff"
replace hybridSuperClusters.ecalhitproducer = "CreateDeadCells"

# clusters in preshower
include "RecoEcal/EgammaClusterProducers/data/preshowerClusteringSequence.cff"
 
# create path with all clustering algos
# NB: preshower MUST be run after island clustering in the endcap
sequence ecalClusteringSequence = {
                                     islandClusteringSequence,
                                     hybridClusteringSequence,
                                     preshowerClusteringSequence
                                   }
  
# sequence to make pixel-based Gsf electrons
include "RecoEgamma/EgammaElectronProducers/data/pixelMatchGsfElectronSequence.cff"
  
include "RecoEgamma/EgammaPhotonProducers/data/photonSequence.cff"

sequence EGammaReco = {pixelMatchGsfElectronSequence,photonSequence}

# defines sequence trackerlocalreco
include "RecoLocalTracker/Configuration/data/RecoLocalTracker.cff"

# defines sequence muonlocalreco
include "RecoLocalMuon/Configuration/data/RecoLocalMuon.cff"

# defines ckftracks and rstracks
include "RecoTracker/Configuration/data/RecoTracker.cff"
include "TrackingTools/Configuration/data/TrackingTools.cff"

#define muonreco
include "RecoMuon/Configuration/data/RecoMuon.cff"


#SB Need reconstruction of Jets:
# CMS Geometry
include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
# Calo geometry/topology services
include "Geometry/CaloEventSetup/data/CaloGeometry.cfi"
es_module = CaloTowerConstituentsMapBuilder {
      untracked string MapFile="Geometry/CaloTopology/data/CaloTowerEEGeometric.map.gz"
}

include "Geometry/CaloEventSetup/data/CaloTopology.cfi"
es_module = HcalTopologyIdealEP {}
 
   module towerMaker = CaloTowersCreator {
      double HBThreshold = 0.9     // GeV, Scheme B
      double HOThreshold = 1.1     // GeV, Scheme B
      double HESThreshold = 1.4    // GeV, Scheme B
      double HEDThreshold = 1.4    // GeV, Scheme B
      double HF1Threshold = 0.5    // GeV, ORCA value
      double HF2Threshold = 0.5    // GeV, ORCA value
      double EBThreshold = 0.09    // GeV, ORCA value w/o selective readout
      double EEThreshold = 0.45    // GeV, ORCA value w/o selective readout

      double EBSumThreshold = 0.2  // GeV, Scheme B
      double EESumThreshold = 0.45 // GeV, Scheme B
      double HcalThreshold = -1000 // GeV, -1000 means cut not used
      double EcutTower = -1000     // GeV, -1000 means cut not used
      double EBWeight = 1.0
      double EEWeight = 1.0
      double HBWeight = 1.0
      double HESWeight = 1.0
      double HEDWeight = 1.0
      double HOWeight = 1.0
      double HF1Weight = 1.0
      double HF2Weight = 1.0
      bool UseHO = true
      InputTag hbheInput = hbhereco
      InputTag hoInput = horeco
      InputTag hfInput = hfreco
      VInputTag ecalInputs = { CreateDeadCells:EcalRecHitsEB , ecalRecHit:EcalRecHitsEE }
      untracked bool AllowMissingInputs = false
   }

module caloTowers = CaloTowerCandidateCreator {
          InputTag src = towerMaker
          double minimumEt = -1
          double minimumE = -1
}
 
sequence caloTowersRec = { towerMaker, caloTowers }

include "RecoMET/Configuration/data/RecoMET.cff"

include "RecoJets/JetProducers/data/CaloJets.cfi"
include "RecoJets/Configuration/data/GenJetParticles.cff"
include "RecoJets/JetProducers/data/GenJets.cfi"

sequence jetsWithAll = {Fastjet10GenJets & Fastjet6GenJets & Kt10GenJets & iterativeCone5GenJets & iterativeCone7GenJets & midPointCone5GenJets & midPointCone7GenJets}
sequence jetsNoNu    = {Fastjet10GenJetsNoNu & Fastjet6GenJetsNoNu & Kt10GenJetsNoNu & iterativeCone5GenJetsNoNu & iterativeCone7GenJetsNoNu & midPointCone5GenJetsNoNu & midPointCone7GenJetsNoNu }
sequence recoGenJets = {jetsWithAll}

sequence recoJets = {Fastjet10CaloJets & Fastjet6CaloJets & Kt10CaloJets & iterativeCone5CaloJets & iterativeCone7CaloJets &  midPointCone5CaloJets & midPointCone7CaloJets& Fastjet10E1CaloJets}
sequence caloJetMet = { metreco,recoGenJets, recoJets }
include "Configuration/JetMET/data/calorimetry-jetmetcorrections.cff"


    path p = { genParticleCandidates,genParticlesAllStable,trackerlocalreco, muonlocalreco,
ecalLocalRecoSequence,CreateDeadCells, hcalLocalRecoSequence,ecalClusteringSequence, caloTowersRec,
EGammaReco,caloJetMet, caloJetMetCorrections}

    endpath outpath = { RECO }
}
